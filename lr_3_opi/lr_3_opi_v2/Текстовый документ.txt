//----------------------------------------------
class Vault {
protected:

	int **Array;
	unsigned int countStr;
	unsigned int countClmn;
	unsigned int length;

public:

	void creationOfArray() {
		/*функция выдиления памяти для массива*/
		Array = new int*[countClmn];
		for (unsigned int i = 0; i < countClmn; i++) {
			Array[i] = new int[countClmn];
		}
	}

	int isEqual() {
		/*Проверка на эквивалентность количества строк и столбцов массива*/
		if (countStr == countClmn) return 0;
		else if ((countStr > countClmn) || (countStr < countClmn)) return 1;
		return 2;
	}

};
//----------------------------------------------
class UI: public Vault {
public:

	void setCountStr(int cStr) {
		countStr = cStr;
	}

	int getCountStr() {
		return countStr;
	}

	void setCountClmn(int cClmn) {
		countClmn = cClmn;
	}

	int getCountClmn() {
		return countClmn;
	}

	int getLength() {
		/*Функция для нахождения общего числа элементов матрицы*/
		return length = countStr * countClmn;
	}

	bool checkError(int cStr, int cClmn) {
		/*Проверка на правильность ввода матрицы*/
		if ((cStr > 1) && (cStr < 21) && (cClmn > 1) && (cClmn < 21)) {
			return true;
		}
		return false;
	}

	void insertionOfNods() {
		/*Ручной ввод элементов матрицы*/
		cout << "\nInsert values to array:\n\n";
		for (unsigned int i = 0; i < countClmn; i++) {
			for (unsigned int j = 0; j < countStr; j++) {
				cout << "Array[" << i + 1 << "][" << j + 1 << "] = ";
				cin >> Array[i][j];
			}
		}
	}

	void randInsertion() {
		/*Случайный ввод элементов матрицы*/
		for (unsigned int i = 0; i < countClmn; i++) {
			for (unsigned int j = 0; j < countStr; j++) {
				Array[i][j] = rand() % 100;
			}
		}
	}

	void outputOfArray() {
		/*Вывод матрицы в консоль*/
		cout << "\n\nOutput of array:\n";
		for (unsigned int i = 0; i < countClmn; i++) {
			for (unsigned int j = 0; j < countStr; j++) {
				cout.width(3);
				cout << Array[i][j];
			}
			cout << "\n";
		}
	}

	UI() {
		Array = NULL;
		countStr = NULL;
		countClmn = NULL;
	}
	
	~UI() {
		delete Array;
	}

};
//----------------------------------------------
class File: public UI {
public:

	void fileInsertionOfNods() {
		/*Файловый ввод матрицы*/
		int m = 0, n = 0;
		ifstream fin("file.in", ios_base::in);
		ifstream fin2("file.out", ios_base::in);
		if (fin2.is_open()) {
			for (unsigned int i = 0; i < countStr; i++) {
				for (unsigned int j = 0; j < countClmn; j++) {
					if (fin2) {
						fin2 >> Array[i][j];
						m = i;
						n = j;
					}
					else {
						Array[i][j] = rand() % 100;
					}
				}
			}
			Array[m][n] = rand() % 100;
			fin2.close();
		}
		else if (fin.is_open()) {
			for (unsigned int i = 0; i < countStr; i++) {
				for (unsigned int j = 0; j < countClmn; j++) {
					if (fin) {
						fin >> Array[i][j];
						m = i;
						n = j;
					}
					else {
						Array[i][j] = rand() % 100;
					}
				}
			}
			Array[m][n] = rand() % 100;
			fin.close();
		}
		else {	
			cout<<"File can not be opened!\n";
			_getch();
		}
		return;
	}

	void fileOutput() {
		/*Файловый вывод матрицы*/
		ofstream fout("file.out", ios_base::out);
		for (unsigned int i = 0; i < countClmn; i++) {
			for (unsigned int j = 0; j < countStr; j++) {
				if (fout) {
					fout << Array[i][j] << " ";
				}
			}
		}
	}

};
//----------------------------------------------
class Processing: public File {
public:

	void taskFunc() {
		/*Функция обработки массива согласно задания (строки поменять со столбцами)*/
		cout << endl;
		if (isEqual() == NULL) {
			for (unsigned int i = 0; i < countStr; i++) {
				for (unsigned int j = i; j < countClmn; j++) {
					swap(Array[i][j], Array[j][i]);
				}
			}
		}
		else if (isEqual() == 1) {
			fileOutput();
			ifstream fin("file.out", ios_base::in);
			if (fin) {
				swap(countStr, countClmn);
				creationOfArray();
			}
			for (unsigned int j = 0; j < countStr; j++) {
				for (unsigned int i = 0; i < countClmn; i++) {
					fin >> Array[i][j];
				}
			}
		}
	}

};